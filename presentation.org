#+TITLE: PUG Milan 13/02/2019

* PHPStan: Definition

/PHP STatic ANalisys tool/

It uses a technique called /Abstract Interpretation/ to tell if your
types are correct, aka if you are using your objects appropriately.

#+BEGIN_SRC php :eval never
function useless(int $foo)      // {int}
{
    $foo = rand(1, 100);        // {1, 100}
    if ($foo > 10) {            // {11, 100}
        echo $foo;              // no effects, noop
    }
}
#+END_SRC

* PHPStan: Introduction

If you don't use PHPStan in 2019, shame on you
- [[file:src/undefined_variables.php::echo%20$b;][Undefined variables]]
- [[file:src/undefined_classes.php::$foo%20=%20new%20Foo();][Undefined classes]]
- [[file:src/simple_types.php::needAnInteger(1);][Simple types]]
- [[file:src/union_types.php::needAnInteger($d);][Union types]]
- [[file:src/optional_types.php::needAnInteger(maybeReturnsAnInteger(true));][Optional types]]
- [[file:src/constant_types.php::echo%20$a%5B'd'%5D;][Constant types]]
- [[file:src/properties.php::$p->foo%20=%20"Something";][Properties]]
- [[file:src/callable_types.php::$callable(1);][Callable types]]
- [[file:src/generic_types.php::swap($b);][Generic types]]
- [[file:src/dependent_types.php::printf("This%20is%20a%20number%20%25d",%201,%20"bar");][Depentent types]]

* PHPStan: I had a problem (1)

It can be used as it is or it can be extended with custom rules

For a long time I had this problem with value objects or simple DTOs

How to implement them?

#+BEGIN_SRC php :eval never
class Amount
{
    /** @var int */
    private $cents;

    /** @var int */
    private $precision;

    /** @var string */
    private $currency;

    public function __construct(int $amount, string $currency, int $precision = 2)
    {
        $this->cents = $cents;
        $this->precision = $precision;
        $this->currency = $currency;
    }

    public function getCents(): int
    {
        return $this->cents;
    }

    // ... You got it
}
#+END_SRC

Tedious... I know that an IDE can generate it but...

* PHPStan: I had a problem (2)

Searching around... :-O

#+BEGIN_SRC php :eval never
class Amount {
    /** @var int */
    public $cents;

    /** @var int */
    public $precision;

    /** @var string */
    public $currency;

    public function __construct(int $cents, string $currency, int $precision = 2)
    {
        // ... You got it
    }
}
#+END_SRC

Forget information hiding, here there's nothing to hide, the worst
problem here is that value objects are immutable and here you cannot
prevent it.

* PHPStan: cool things (1)

I want:
- Guaranteed immutability
- Dryness
- Type safety
- Usability

Enter [[file:src/Amount.php::final%20class%20Amount%20extends%20Precious][Precious]]

* PHPStan: cool things (2)

PHPStan can be extended, every project/library can define their rule,
knowing the context you can be more clever in knowing what is right
and what is wrong.

When you include a library that defines some custom rules you can
include them using your [[file:phpstan.neon::parameters:][phpstan file]].

Example of Precious rules:
- A value object must be declared [[file:src/Amount.php::final%20class%20Amount%20extends%20Precious][final]], we have a [[file:vendor/gabrielelana/precious/src/PHPStan/Rule/PreciousClassMustBeFinalRule.php::public%20function%20processNode(Node%20$node,%20Scope%20$scope):%20array][rule]] for that
- All properties must be accessible
- All properties must be read only
- All properties must be typed
- Undefined properties must be reported

All of that is done with a [[file:vendor/gabrielelana/precious/src/PHPStan/Reflection/PreciousPropertiesClassReflectionExtension.php::class%20PreciousPropertiesClassReflectionExtension%20implements%20PropertiesClassReflectionExtension,%20BrokerAwareClassReflectionExtension][property class reflection extension]]

* Eris, Property Based Testing

Example based tests are biased as the writer is a human, you think how
your code can fail or how your code can be used and you write related
tests but... can you really think of all the possible usages?

Would be useful state what properties you expect your code to hold and
let a test generator to [[file:test/SurpriseTest.php::class%20SurpriseTest%20extends%20TestCase][surprise you]].

* Eris, Shrinking

Since Eris explores broadly the given domains (aka the inputs of the
system under test) if found, the counterexample can be huge or it can
be hard to understand why your code fails for `204833927421`, maybe it
fails because it fails for every odd numbers, if that is true then `1`
would be a better example of an input that breaks your code.

Eris, if it finds a counterexample, it tries to "reduce" the
counterexample at its minimal (canonical?) form so that the ending
counterexample is as "simple" as possible. This process is called
/shrinking/.

See a [[file:test/ContainsTest.php::class%20ContainsTest%20extends%20TestCase][simple example]]

* Eris, Generators

Eris provides generators for the primitive values and generator
combinators for those values but your domain can (should!) be
different, you have your types and so you should have your generators.

Here's an [[file:test/CollectionTest.php::public%20function%20testUniqueMustShortenTheNumberOfValuesWhenThereAreDuplicates()][example]] of use of generator combinators.

Here's an [[file:test/CollectionTest.php::$this->forAll(new%20CollectionGenerator())][example]] of use of a custom generator.

* Eris, Model Checking

Before we used ~array_unique~ to verify that our implementation of
~unique~ is correct, we can apply the same principle by compare the
*behavior* of our SUT (System Under Test) with the *behavior* of a
simpler system that we can call "the model".

How do you test the behavior? By calling public methods ;-)

Here's an [[file:test/ModelCheckingTest.php::class%20ModelCheckingTest%20extends%20TestCase][example]] of it.

* Eris, in the Wild (1)

#+BEGIN_SRC php :eval never
public function testToStringAndBackProperty()
{
    $this->forAll(
        Generator\int(),
        Generator\choose(1, 20)
    )->then(function ($amount, $scale) {
        $money = Money::fromAmountAndCurrency(
            $amount,
            'EUR',
            $scale
        );
        $this->assertEquals(
            $money,
            Money::fromString((string) $money)
        );
    });
}
#+END_SRC

* Eris, in the Wild (2)

Look [[https://github.com/EasyWelfare/recruiter/blob/master/spec/Recruiter/Acceptance/EnduranceTest.php#L27][here]]

* Distributed Systems: Crash!

We were facing a sudden and silent death of PHP processes. Enter
~GracefulDeat~

#+BEGIN_SRC php :eval never
GracefulDeath::around(function() {
    try {
        // Avoid to print the error in order to have clean output, don't try this at home :-)
        error_reporting(E_ALL ^ E_ERROR);
        // Creating an instance of an unknown class will cause a fatal error
        new UnknownClass();

    } catch(Exception $e) {
        // A fatal error is uncatchable
        echo "You cannot catch this, AHAHAHAHA!!!\n";
    }
})
->afterViolentDeath("Yes, I can ;-)\n")
->run();
#+END_SRC

How to test if something is *really* robust? How to cause *real*
problems? Enter ~ViolentDeath~

#+BEGIN_SRC php :eval never
drink_poison($msToTakeEffect=500, $msToAgonizeAtMost=1000);
// Here we have created a background thread that will wait
// at least for 500ms and at most 1500ms before to cause
// an horrible death with a segmentation fault

play_russian_roulette($probabilityToDie)
// Here we have created a background thread that will wait some time
// and then will cause a violent death with a certain probability
#+END_SRC

* Distributed Systems: Scale Horizontally

We needed to scale certain procedure, but mostly we wanted to be sure
that, *no matter what*, some piece of code was executed.

We started with notifications: we needed to notify a merchant that an
payed for something.

With multiple services, we needed to be resilient to temporary
failures of one of those systems and so we needed a way to communicate
not only asynchronously but we needed a way to retry to send those
messages.

Enter ~Recruiter~. An example of an optimistic job, possibly executed
on one of N nodes, with an exponential backoff retry policy.

#+BEGIN_SRC php :eval never
Notification::fromMessage($message)
    ->asJobOf($recruiter)
    ->retryWithPolicy(ExponentialBackoff::forTimes(5, 120))
    ->execute();
#+END_SRC

A simple ~Workable~ piece of code is something like that.

#+BEGIN_SRC php :eval never
class ShellCommand implements Workable
{
    use WorkableBehaviour;

    public function execute()
    {
        exec($this->parameters['command'], $output, $returnCode);
        $output = implode(PHP_EOL, $output);
        if ($returnCode != 0) {
            throw new RuntimeException(
                "Command Execution failed (return code $returnCode). Output: " . $output
            );
        }
        return $output;
    }
}
#+END_SRC

* Distributed Systems: Leader Election

See ~Geezer~ and ~Recruiter~

